% % convergence of spatial branch and bound algorithm
clc
clear all %alpha =0.1 B=0.6 conmc =1; 53
close all
K=10;K_out=10000;p=10;r=10;n_ins=100; n_train=10;
n=100;
% load VRS_SBB_Louizou.mat

Gamma_set =[0.05*K;0.1*K;0.15*K];
alpha_set = [0.025;0.05;0.1];
B_set = [floor(0.3*p);floor(0.6*p);floor(0.9*p)];
qhat=(1/K)*ones(1,K);n_iter_CD=2;partitions_sbb=1;time_exit=7200;
rel_diff=0;
instance_diff=0;
rel_improv=0;
instance_improv =0;
tol2=0.01;
tol4=0.01;
load all_instances_performance
dir1=Direction_all{1};
G = graph_generate(p,r,dir1);
ins_nconvrg=zeros(n_ins,1);
addpath('./Loizou/')

% load dirichlet_instance.mat
% rng(yy)
% [G,dir1] = graph_generate_dir(p,r);

for ij=1:n_ins
    [E,N,set_non_rem,set_rem]= graph_set_rem(G,p,r); % generate set of removable and nonremovable arcs
    size_set_non_rem=size(set_non_rem,1);
    cap_all =all_C{ij};
    [cap,diag_cap,diag_cap_non_rem,zeta_lb,zeta_ub]=capacities_dirichlet(G,K,...
        E,N,set_non_rem, cap_all);
    for ii=25:25
        load(['ins_',num2str(ii),'.mat']);
        disp('ITERATIONS');
        ft=0;
        ij
        if (Gamma_set==1)&&(alpha_set==0.05)&&(B_set==9)
            ft=1;
        end
        if ft && 100*(cvar_D_all(ij,1)-cvar_R_all(ij,1))/cvar_D_all(ij,1) >=1
            
            Gam1 = Gamma_set;
                in =0.1*ones(K,1);
            
            a = zeros(n_ins,1);
            
            rng('shuffle')
            s=rng;
            q_uni = ones(K,1)*(1/K);
            
            for i=1:n_train
                q_true = gamrnd(in , 1);
                q_true = q_true./sum(q_true);
                h = norm(q_true-q_uni,2);
                a(i,1) = h;
            end
            b = sort(a);
            Gamma = b(ceil(0.95*n_train));
            [Gamma Gam1]
            l1b=Gamma*(K^0.5);
            B=B_set;
            alpha=alpha_set;
            
            flag=0;
            [cvar_D,deter_p,l_h] = minimize_wcvar(E,N,B,alpha,Gamma,qhat, K,...
                diag_cap,set_non_rem,diag_cap_non_rem,set_rem,zeta_lb,zeta_ub,l1b);
            
            l_in=round(l_h);
            cvar_Det(ij)=cvar_D;
            deter_plan(:,ij)=deter_p;
            time_yalmip=0;
            time_gurobi=0;
            ustar=[];
            
            [rel_gap,gap,ub_iter,branch_iter,gap_tol4, time_tol4, cvar_R,zeta_ran,z_supp_R, u_R,time_tol2,...
                flag,gap_tol2,time_yalmip,time_cplex,least_lb] = spatial_BB_showconvergence(l_in,cap,diag_cap,E, N, G,B,K,Gamma,alpha,partitions_sbb,...
                flag,qhat,n_iter_CD,zeta_lb,zeta_ub,tol2,tol4,time_exit,set_non_rem,...
                diag_cap_non_rem,set_rem,time_yalmip,time_gurobi,l1b);
            
            l_in=[ones(B,1);zeros(E-size_set_non_rem-B,1)];
            time_yalmip = 0;
            time_cplex =0;
            [fl_opt,z_supp_L,time_yalmip,time_gurobi]= Loizou_support(alpha,Gamma,cap,diag_cap,...
                l_in,E,N,B,K,G,qhat,set_non_rem,diag_cap_non_rem,set_rem,time_yalmip,time_cplex,l1b);
            [u_L,cvar_L,zeta,time_yalmip,time_gurobi]=Loizou_Primal(fl_opt,size(z_supp_L,2),K,zeta_lb,...
                zeta_ub,alpha, Gamma,qhat,set_non_rem,diag_cap_non_rem,time_yalmip,time_cplex,l1b);
            rr=1;
            ustar_R=[];
            supp_R=[];
            for it=1:size(u_R,1)
                if u_R(it) >sqrt(eps)
                    supp_R(:,rr)=z_supp_R(:,it);
                    ustar_R(rr,1)=u_R(it,1);
                    rr=rr+1;
                end
            end
            rr=1;
            ustar_L=[];
            supp_L=[];
            for it=1:size(u_L,1)
                if u_L(it) >sqrt(eps)
                    supp_L(:,rr)=z_supp_L(:,it);
                    ustar_L(rr,1)=u_L(it,1);
                    rr=rr+1;
                end
            end
            supp_R_all{:,ij}=supp_R;
            ustar_R_all{:,ij}=ustar_R;
            supp_L_all{:,ij}=supp_L;
            ustar_L_all{:,ij}=ustar_L;
            %ins_nconvrg(ij,it1,it2,it3)=ins_nconvrg(ij)+flag;
            if (((cvar_D-cvar_R)/cvar_R)*100>1e-1) && (size(ustar_R,1))>1
                rel_diff=rel_diff+((cvar_D-cvar_R)/cvar_R)*100;
                instance_diff=instance_diff+1;
            end
            fl_R=zeros(size(supp_R,2),K);
            
            parfor i=1:size(supp_R,2)
                
                fl_R(i,:) = flows_test(G, supp_R(:,i), cap, N,K);
                
            end
            fl_L=zeros(size(supp_L,2),K);
            
            parfor i=1:size(supp_L,2)
                
                fl_L(i,:) = flows_test(G, supp_L(:,i), cap, N,K);
                
            end
            fl_det=zeros(1,K);
            fl_det= flows_test(G, deter_p, cap, N,K);
            
            if ((cvar_D-cvar_R)/cvar_R)*100>=1
                
                rel_improv=rel_improv+((cvar_D-cvar_R)/cvar_R)*100;
                instance_improv=instance_improv+1;
                parfor i=1:n
                    disp(i); q_true = gamrnd(in , 1);
                    q_true = q_true./sum(q_true);
                    [cvar_out_R,zeta_ran]=test_given_q(fl_R,K,alpha,q_true',ustar_R);
                    [cvar_out_L,zeta_ran_L]=test_given_q(fl_L,K,alpha,q_true',ustar_L);
                    [cvar_out_det,zeta_det]=test_given_q(fl_det,K,alpha,q_true',1);
                    cvar_out_R_all(ij,i) = cvar_out_R;
                    cvar_out_L_all(ij,i) = cvar_out_L;
                    cvar_out_det_R(ij,i) =cvar_out_det;
                end
             figure;   p1=cdfplot(cvar_out_R_all(ij,:))
                set(p1,'color','blue', 'Linewidth',1)
                hold on
                p3=cdfplot(cvar_out_L_all(ij,:))
                set(p3,'color','red', 'Linewidth',1)
                hold on
                p2=cdfplot(cvar_out_det_R(ij,:))
                ylabel('Empirical distribution of out-of-sample CVaR','interpreter','latex', 'FontSize',12)
                set(p2,'color','green', 'Linewidth',1)
                legend('$\mbox{CVaR}_{u_R^*}$','$\mbox{CVaR}_{u_L^*}$','$\mbox{CVaR}_{\ell^*}$', 'location','northwest','interpreter','latex', 'FontSize',12)
                ylabel('Empirical distribution of out-of-sample CVaR','interpreter','latex', 'FontSize',12)
                title('')
                xlabel('Out-of-sample CVaR','interpreter','latex','FontSize',12)
                save('out_sample_CVaR.mat','s','cvar_out_R_all','cvar_out_L_all',...
                    'cvar_out_det_R','dir1','ij','Gamma_set','alpha_set','B_set', 'n_train','n',...
                    'all_C','ustar_L','ustar_R','deter_p','supp_R','supp_L','fl_det','fl_L','fl_R','cvar_D','cvar_R','cvar_L');
            end
        end
    end
    
    dir1=Direction_all{ij+1};
    G = graph_generate(p,r,dir1);
end